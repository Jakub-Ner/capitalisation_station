syntax = "proto3";

package aea.eightballer.markets.v0_1_0;

message MarketsMessage{

  // Custom Types
  message ErrorCode{
    enum ErrorCodeEnum {
      UNSUPPORTED_PROTOCOL = 0;
      DECODING_ERROR = 1;
      INVALID_MESSAGE = 2;
      UNSUPPORTED_SKILL = 3;
      INVALID_DIALOGUE = 4;
    }
    ErrorCodeEnum error_code = 1;
  }

  message Market{
    message Market {
      string id = 1;
      string lowercaseId = 2;
      string symbol = 3;
      string base = 4;
      string quote = 5;
      string settle = 6;
      string baseId = 7;
      string quoteId = 8;
      string settleId = 9;
      string type = 10;
      bool spot = 11;
      bool margin = 12;
      bool swap = 13;
      bool future = 14;
      bool option = 15;
      bool active = 16;
      bool contract = 17;
      bool linear = 18;
      bool inverse = 19;
      float taker = 20;
      float maker = 21;
      float contractSize = 22;
      float expiry = 23;
      string expiryDatetime = 24;
      float strike = 25;
      string optionType = 26;
      float precision = 27;
      string limits = 28;
      string info = 29;
    }
  }

  message Markets{
    message Markets {
      repeated Market markets = 1;
    }
  }


  // Performatives and contents
  message Get_All_Markets_Performative{
    string exchange_id = 1;
    string currency = 2;
    bool currency_is_set = 3;
  }

  message Get_Market_Performative{
    string id = 1;
    string exchange_id = 2;
  }

  message All_Markets_Performative{
    Markets markets = 1;
  }

  message Market_Performative{
    Market market = 1;
  }

  message Error_Performative{
    ErrorCode error_code = 1;
    string error_msg = 2;
    map<string, bytes> error_data = 3;
  }


  oneof performative{
    All_Markets_Performative all_markets = 5;
    Error_Performative error = 6;
    Get_All_Markets_Performative get_all_markets = 7;
    Get_Market_Performative get_market = 8;
    Market_Performative market = 9;
  }
}
